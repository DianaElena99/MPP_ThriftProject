/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Festival
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ConcertDTO : TBase
  {
    private int _concertID;
    private string _artist;
    private string _location;
    private string _date;
    private int _seatsSold;
    private int _seatsTotal;
    private int _seatsFree;

    public int ConcertID
    {
      get
      {
        return _concertID;
      }
      set
      {
        __isset.concertID = true;
        this._concertID = value;
      }
    }

    public string Artist
    {
      get
      {
        return _artist;
      }
      set
      {
        __isset.artist = true;
        this._artist = value;
      }
    }

    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }

    public string Date
    {
      get
      {
        return _date;
      }
      set
      {
        __isset.date = true;
        this._date = value;
      }
    }

    public int SeatsSold
    {
      get
      {
        return _seatsSold;
      }
      set
      {
        __isset.seatsSold = true;
        this._seatsSold = value;
      }
    }

    public int SeatsTotal
    {
      get
      {
        return _seatsTotal;
      }
      set
      {
        __isset.seatsTotal = true;
        this._seatsTotal = value;
      }
    }

    public int SeatsFree
    {
      get
      {
        return _seatsFree;
      }
      set
      {
        __isset.seatsFree = true;
        this._seatsFree = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool concertID;
      public bool artist;
      public bool location;
      public bool date;
      public bool seatsSold;
      public bool seatsTotal;
      public bool seatsFree;
    }

    public ConcertDTO() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ConcertID = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Artist = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Location = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Date = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                SeatsSold = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                SeatsTotal = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                SeatsFree = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ConcertDTO");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.concertID) {
          field.Name = "concertID";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ConcertID);
          oprot.WriteFieldEnd();
        }
        if (Artist != null && __isset.artist) {
          field.Name = "artist";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Artist);
          oprot.WriteFieldEnd();
        }
        if (Location != null && __isset.location) {
          field.Name = "location";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Location);
          oprot.WriteFieldEnd();
        }
        if (Date != null && __isset.date) {
          field.Name = "date";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Date);
          oprot.WriteFieldEnd();
        }
        if (__isset.seatsSold) {
          field.Name = "seatsSold";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SeatsSold);
          oprot.WriteFieldEnd();
        }
        if (__isset.seatsTotal) {
          field.Name = "seatsTotal";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SeatsTotal);
          oprot.WriteFieldEnd();
        }
        if (__isset.seatsFree) {
          field.Name = "seatsFree";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SeatsFree);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ConcertDTO(");
      bool __first = true;
      if (__isset.concertID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ConcertID: ");
        __sb.Append(ConcertID);
      }
      if (Artist != null && __isset.artist) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Artist: ");
        __sb.Append(Artist);
      }
      if (Location != null && __isset.location) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Location: ");
        __sb.Append(Location);
      }
      if (Date != null && __isset.date) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Date: ");
        __sb.Append(Date);
      }
      if (__isset.seatsSold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SeatsSold: ");
        __sb.Append(SeatsSold);
      }
      if (__isset.seatsTotal) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SeatsTotal: ");
        __sb.Append(SeatsTotal);
      }
      if (__isset.seatsFree) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SeatsFree: ");
        __sb.Append(SeatsFree);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
