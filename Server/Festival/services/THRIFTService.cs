/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Festival
{
    public partial class THRIFTService
    {
        public interface ISync
        {
            bool Login(User user, int port);
            bool Logout(User user, int port);
            void SellBilet(Bilet b);
            List<ConcertDTO> getConcerts();
            List<ConcertDTO> getConcertsByDate(string data);
            void notifyClients();
        }

        public interface Iface : ISync
        {
#if SILVERLIGHT
      IAsyncResult Begin_Login(AsyncCallback callback, object state, User user, int port);
      bool End_Login(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_Logout(AsyncCallback callback, object state, User user, int port);
      bool End_Logout(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_SellBilet(AsyncCallback callback, object state, Bilet b);
      void End_SellBilet(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_getConcerts(AsyncCallback callback, object state);
      List<ConcertDTO> End_getConcerts(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_getConcertsByDate(AsyncCallback callback, object state, string data);
      List<ConcertDTO> End_getConcertsByDate(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_notifyClients(AsyncCallback callback, object state);
      void End_notifyClients(IAsyncResult asyncResult);
#endif
        }

        public class Client : IDisposable, Iface
        {
            public Client(TProtocol prot) : this(prot, prot)
            {
            }

            public Client(TProtocol iprot, TProtocol oprot)
            {
                iprot_ = iprot;
                oprot_ = oprot;
            }

            protected TProtocol iprot_;
            protected TProtocol oprot_;
            protected int seqid_;

            public TProtocol InputProtocol
            {
                get { return iprot_; }
            }
            public TProtocol OutputProtocol
            {
                get { return oprot_; }
            }


            #region " IDisposable Support "
            private bool _IsDisposed;

            // IDisposable
            public void Dispose()
            {
                Dispose(true);
            }


            protected virtual void Dispose(bool disposing)
            {
                if (!_IsDisposed)
                {
                    if (disposing)
                    {
                        if (iprot_ != null)
                        {
                            ((IDisposable)iprot_).Dispose();
                        }
                        if (oprot_ != null)
                        {
                            ((IDisposable)oprot_).Dispose();
                        }
                    }
                }
                _IsDisposed = true;
            }
            #endregion



#if SILVERLIGHT
      
      public IAsyncResult Begin_Login(AsyncCallback callback, object state, User user, int port)
      {
        return send_Login(callback, state, user, port);
      }

      public bool End_Login(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Login();
      }

#endif

            public bool Login(User user, int port)
            {
#if SILVERLIGHT
        var asyncResult = Begin_Login(null, null, user, port);
        return End_Login(asyncResult);

#else
                send_Login(user, port);
                return recv_Login();

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_Login(AsyncCallback callback, object state, User user, int port)
      {
        oprot_.WriteMessageBegin(new TMessage("Login", TMessageType.Call, seqid_));
        Login_args args = new Login_args();
        args.User = user;
        args.Port = port;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

            public void send_Login(User user, int port)
            {
                oprot_.WriteMessageBegin(new TMessage("Login", TMessageType.Call, seqid_));
                Login_args args = new Login_args();
                args.User = user;
                args.Port = port;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }
#endif

            public bool recv_Login()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                Login_result result = new Login_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Login failed: unknown result");
            }


#if SILVERLIGHT
      
      public IAsyncResult Begin_Logout(AsyncCallback callback, object state, User user, int port)
      {
        return send_Logout(callback, state, user, port);
      }

      public bool End_Logout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Logout();
      }

#endif

            public bool Logout(User user, int port)
            {
#if SILVERLIGHT
        var asyncResult = Begin_Logout(null, null, user, port);
        return End_Logout(asyncResult);

#else
                send_Logout(user, port);
                return recv_Logout();

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_Logout(AsyncCallback callback, object state, User user, int port)
      {
        oprot_.WriteMessageBegin(new TMessage("Logout", TMessageType.Call, seqid_));
        Logout_args args = new Logout_args();
        args.User = user;
        args.Port = port;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

            public void send_Logout(User user, int port)
            {
                oprot_.WriteMessageBegin(new TMessage("Logout", TMessageType.Call, seqid_));
                Logout_args args = new Logout_args();
                args.User = user;
                args.Port = port;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }
#endif

            public bool recv_Logout()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                Logout_result result = new Logout_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Logout failed: unknown result");
            }


#if SILVERLIGHT
      
      public IAsyncResult Begin_SellBilet(AsyncCallback callback, object state, Bilet b)
      {
        return send_SellBilet(callback, state, b);
      }

      public void End_SellBilet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SellBilet();
      }

#endif

            public void SellBilet(Bilet b)
            {
#if SILVERLIGHT
        var asyncResult = Begin_SellBilet(null, null, b);
        End_SellBilet(asyncResult);

#else
                send_SellBilet(b);
                recv_SellBilet();

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_SellBilet(AsyncCallback callback, object state, Bilet b)
      {
        oprot_.WriteMessageBegin(new TMessage("SellBilet", TMessageType.Call, seqid_));
        SellBilet_args args = new SellBilet_args();
        args.B = b;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

            public void send_SellBilet(Bilet b)
            {
                oprot_.WriteMessageBegin(new TMessage("SellBilet", TMessageType.Call, seqid_));
                SellBilet_args args = new SellBilet_args();
                args.B = b;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }
#endif

            public void recv_SellBilet()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                SellBilet_result result = new SellBilet_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                return;
            }


#if SILVERLIGHT
      
      public IAsyncResult Begin_getConcerts(AsyncCallback callback, object state)
      {
        return send_getConcerts(callback, state);
      }

      public List<ConcertDTO> End_getConcerts(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getConcerts();
      }

#endif

            public List<ConcertDTO> getConcerts()
            {
#if SILVERLIGHT
        var asyncResult = Begin_getConcerts(null, null);
        return End_getConcerts(asyncResult);

#else
                send_getConcerts();
                return recv_getConcerts();

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_getConcerts(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("getConcerts", TMessageType.Call, seqid_));
        getConcerts_args args = new getConcerts_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

            public void send_getConcerts()
            {
                oprot_.WriteMessageBegin(new TMessage("getConcerts", TMessageType.Call, seqid_));
                getConcerts_args args = new getConcerts_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }
#endif

            public List<ConcertDTO> recv_getConcerts()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                getConcerts_result result = new getConcerts_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getConcerts failed: unknown result");
            }


#if SILVERLIGHT
      
      public IAsyncResult Begin_getConcertsByDate(AsyncCallback callback, object state, string data)
      {
        return send_getConcertsByDate(callback, state, data);
      }

      public List<ConcertDTO> End_getConcertsByDate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getConcertsByDate();
      }

#endif

            public List<ConcertDTO> getConcertsByDate(string data)
            {
#if SILVERLIGHT
        var asyncResult = Begin_getConcertsByDate(null, null, data);
        return End_getConcertsByDate(asyncResult);

#else
                send_getConcertsByDate(data);
                return recv_getConcertsByDate();

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_getConcertsByDate(AsyncCallback callback, object state, string data)
      {
        oprot_.WriteMessageBegin(new TMessage("getConcertsByDate", TMessageType.Call, seqid_));
        getConcertsByDate_args args = new getConcertsByDate_args();
        args.Data = data;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

            public void send_getConcertsByDate(string data)
            {
                oprot_.WriteMessageBegin(new TMessage("getConcertsByDate", TMessageType.Call, seqid_));
                getConcertsByDate_args args = new getConcertsByDate_args();
                args.Data = data;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }
#endif

            public List<ConcertDTO> recv_getConcertsByDate()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                getConcertsByDate_result result = new getConcertsByDate_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getConcertsByDate failed: unknown result");
            }


#if SILVERLIGHT
      
      public IAsyncResult Begin_notifyClients(AsyncCallback callback, object state)
      {
        return send_notifyClients(callback, state);
      }

      public void End_notifyClients(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_notifyClients();
      }

#endif

            public void notifyClients()
            {
#if SILVERLIGHT
        var asyncResult = Begin_notifyClients(null, null);
        End_notifyClients(asyncResult);

#else
                send_notifyClients();
                recv_notifyClients();

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_notifyClients(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("notifyClients", TMessageType.Call, seqid_));
        notifyClients_args args = new notifyClients_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

#else

            public void send_notifyClients()
            {
                oprot_.WriteMessageBegin(new TMessage("notifyClients", TMessageType.Call, seqid_));
                notifyClients_args args = new notifyClients_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }
#endif

            public void recv_notifyClients()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                notifyClients_result result = new notifyClients_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                return;
            }

        }
        public class Processor : TProcessor
        {
            public Processor(ISync iface)
            {
                iface_ = iface;
                processMap_["Login"] = Login_Process;
                processMap_["Logout"] = Logout_Process;
                processMap_["SellBilet"] = SellBilet_Process;
                processMap_["getConcerts"] = getConcerts_Process;
                processMap_["getConcertsByDate"] = getConcertsByDate_Process;
                processMap_["notifyClients"] = notifyClients_Process;
            }

            protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
            private ISync iface_;
            protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

            public bool Process(TProtocol iprot, TProtocol oprot)
            {
                try
                {
                    TMessage msg = iprot.ReadMessageBegin();
                    ProcessFunction fn;
                    processMap_.TryGetValue(msg.Name, out fn);
                    if (fn == null)
                    {
                        TProtocolUtil.Skip(iprot, TType.Struct);
                        iprot.ReadMessageEnd();
                        TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                        oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                        x.Write(oprot);
                        oprot.WriteMessageEnd();
                        oprot.Transport.Flush();
                        return true;
                    }
                    fn(msg.SeqID, iprot, oprot);
                }
                catch (IOException)
                {
                    return false;
                }
                return true;
            }

            public void Login_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                Login_args args = new Login_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                Login_result result = new Login_result();
                try
                {
                    result.Success = iface_.Login(args.User, args.Port);
                    oprot.WriteMessageBegin(new TMessage("Login", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("Login", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void Logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                Logout_args args = new Logout_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                Logout_result result = new Logout_result();
                try
                {
                    result.Success = iface_.Logout(args.User, args.Port);
                    oprot.WriteMessageBegin(new TMessage("Logout", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("Logout", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void SellBilet_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                SellBilet_args args = new SellBilet_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                SellBilet_result result = new SellBilet_result();
                try
                {
                    iface_.SellBilet(args.B);
                    oprot.WriteMessageBegin(new TMessage("SellBilet", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("SellBilet", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getConcerts_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                getConcerts_args args = new getConcerts_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                getConcerts_result result = new getConcerts_result();
                try
                {
                    result.Success = iface_.getConcerts();
                    oprot.WriteMessageBegin(new TMessage("getConcerts", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("getConcerts", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getConcertsByDate_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                getConcertsByDate_args args = new getConcertsByDate_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                getConcertsByDate_result result = new getConcertsByDate_result();
                try
                {
                    result.Success = iface_.getConcertsByDate(args.Data);
                    oprot.WriteMessageBegin(new TMessage("getConcertsByDate", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("getConcertsByDate", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void notifyClients_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                notifyClients_args args = new notifyClients_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                notifyClients_result result = new notifyClients_result();
                try
                {
                    iface_.notifyClients();
                    oprot.WriteMessageBegin(new TMessage("notifyClients", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("notifyClients", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class Login_args : TBase
        {
            private User _user;
            private int _port;

            public User User
            {
                get
                {
                    return _user;
                }
                set
                {
                    __isset.user = true;
                    this._user = value;
                }
            }

            public int Port
            {
                get
                {
                    return _port;
                }
                set
                {
                    __isset.port = true;
                    this._port = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool user;
                public bool port;
            }

            public Login_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    User = new User();
                                    User.Read(iprot);
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.I32)
                                {
                                    Port = iprot.ReadI32();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("Login_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (User != null && __isset.user)
                    {
                        field.Name = "user";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        User.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    if (__isset.port)
                    {
                        field.Name = "port";
                        field.Type = TType.I32;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(Port);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("Login_args(");
                bool __first = true;
                if (User != null && __isset.user)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("User: ");
                    __sb.Append(User == null ? "<null>" : User.ToString());
                }
                if (__isset.port)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Port: ");
                    __sb.Append(Port);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class Login_result : TBase
        {
            private bool _success;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public Login_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Bool)
                                {
                                    Success = iprot.ReadBool();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("Login_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteBool(Success);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("Login_result(");
                bool __first = true;
                if (__isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class Logout_args : TBase
        {
            private User _user;
            private int _port;

            public User User
            {
                get
                {
                    return _user;
                }
                set
                {
                    __isset.user = true;
                    this._user = value;
                }
            }

            public int Port
            {
                get
                {
                    return _port;
                }
                set
                {
                    __isset.port = true;
                    this._port = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool user;
                public bool port;
            }

            public Logout_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    User = new User();
                                    User.Read(iprot);
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.I32)
                                {
                                    Port = iprot.ReadI32();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("Logout_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (User != null && __isset.user)
                    {
                        field.Name = "user";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        User.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    if (__isset.port)
                    {
                        field.Name = "port";
                        field.Type = TType.I32;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(Port);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("Logout_args(");
                bool __first = true;
                if (User != null && __isset.user)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("User: ");
                    __sb.Append(User == null ? "<null>" : User.ToString());
                }
                if (__isset.port)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Port: ");
                    __sb.Append(Port);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class Logout_result : TBase
        {
            private bool _success;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public Logout_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Bool)
                                {
                                    Success = iprot.ReadBool();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("Logout_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteBool(Success);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("Logout_result(");
                bool __first = true;
                if (__isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class SellBilet_args : TBase
        {
            private Bilet _b;

            public Bilet B
            {
                get
                {
                    return _b;
                }
                set
                {
                    __isset.b = true;
                    this._b = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool b;
            }

            public SellBilet_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    B = new Bilet();
                                    B.Read(iprot);
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("SellBilet_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (B != null && __isset.b)
                    {
                        field.Name = "b";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        B.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("SellBilet_args(");
                bool __first = true;
                if (B != null && __isset.b)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("B: ");
                    __sb.Append(B == null ? "<null>" : B.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class SellBilet_result : TBase
        {

            public SellBilet_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("SellBilet_result");
                    oprot.WriteStructBegin(struc);

                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("SellBilet_result(");
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class getConcerts_args : TBase
        {

            public getConcerts_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("getConcerts_args");
                    oprot.WriteStructBegin(struc);
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("getConcerts_args(");
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class getConcerts_result : TBase
        {
            private List<ConcertDTO> _success;

            public List<ConcertDTO> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public getConcerts_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.List)
                                {
                                    {
                                        Success = new List<ConcertDTO>();
                                        TList _list0 = iprot.ReadListBegin();
                                        for (int _i1 = 0; _i1 < _list0.Count; ++_i1)
                                        {
                                            ConcertDTO _elem2;
                                            _elem2 = new ConcertDTO();
                                            _elem2.Read(iprot);
                                            Success.Add(_elem2);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("getConcerts_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            {
                                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                                foreach (ConcertDTO _iter3 in Success)
                                {
                                    _iter3.Write(oprot);
                                }
                                oprot.WriteListEnd();
                            }
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("getConcerts_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class getConcertsByDate_args : TBase
        {
            private string _data;

            public string Data
            {
                get
                {
                    return _data;
                }
                set
                {
                    __isset.data = true;
                    this._data = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool data;
            }

            public getConcertsByDate_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Data = iprot.ReadString();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("getConcertsByDate_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (Data != null && __isset.data)
                    {
                        field.Name = "data";
                        field.Type = TType.String;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Data);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("getConcertsByDate_args(");
                bool __first = true;
                if (Data != null && __isset.data)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Data: ");
                    __sb.Append(Data);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class getConcertsByDate_result : TBase
        {
            private List<ConcertDTO> _success;

            public List<ConcertDTO> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public getConcertsByDate_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.List)
                                {
                                    {
                                        Success = new List<ConcertDTO>();
                                        TList _list4 = iprot.ReadListBegin();
                                        for (int _i5 = 0; _i5 < _list4.Count; ++_i5)
                                        {
                                            ConcertDTO _elem6;
                                            _elem6 = new ConcertDTO();
                                            _elem6.Read(iprot);
                                            Success.Add(_elem6);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("getConcertsByDate_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            {
                                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                                foreach (ConcertDTO _iter7 in Success)
                                {
                                    _iter7.Write(oprot);
                                }
                                oprot.WriteListEnd();
                            }
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("getConcertsByDate_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class notifyClients_args : TBase
        {

            public notifyClients_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("notifyClients_args");
                    oprot.WriteStructBegin(struc);
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("notifyClients_args(");
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class notifyClients_result : TBase
        {

            public notifyClients_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("notifyClients_result");
                    oprot.WriteStructBegin(struc);

                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("notifyClients_result(");
                __sb.Append(")");
                return __sb.ToString();
            }

        }

    }
}
