/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.Festival.common;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-04-20")
public class Concert implements org.apache.thrift.TBase<Concert, Concert._Fields>, java.io.Serializable, Cloneable, Comparable<Concert> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Concert");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ARTIST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("artistID", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LOCATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("locationID", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SEATS_FIELD_DESC = new org.apache.thrift.protocol.TField("seats", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConcertStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConcertTupleSchemeFactory();

  public int id; // required
  public int artistID; // required
  public int locationID; // required
  public @org.apache.thrift.annotation.Nullable String date; // required
  public int seats; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ARTIST_ID((short)2, "artistID"),
    LOCATION_ID((short)3, "locationID"),
    DATE((short)4, "date"),
    SEATS((short)5, "seats");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ARTIST_ID
          return ARTIST_ID;
        case 3: // LOCATION_ID
          return LOCATION_ID;
        case 4: // DATE
          return DATE;
        case 5: // SEATS
          return SEATS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ARTISTID_ISSET_ID = 1;
  private static final int __LOCATIONID_ISSET_ID = 2;
  private static final int __SEATS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARTIST_ID, new org.apache.thrift.meta_data.FieldMetaData("artistID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCATION_ID, new org.apache.thrift.meta_data.FieldMetaData("locationID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEATS, new org.apache.thrift.meta_data.FieldMetaData("seats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Concert.class, metaDataMap);
  }

  public Concert() {
  }

  public Concert(
    int id,
    int artistID,
    int locationID,
    String date,
    int seats)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.artistID = artistID;
    setArtistIDIsSet(true);
    this.locationID = locationID;
    setLocationIDIsSet(true);
    this.date = date;
    this.seats = seats;
    setSeatsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Concert(Concert other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.artistID = other.artistID;
    this.locationID = other.locationID;
    if (other.isSetDate()) {
      this.date = other.date;
    }
    this.seats = other.seats;
  }

  public Concert deepCopy() {
    return new Concert(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setArtistIDIsSet(false);
    this.artistID = 0;
    setLocationIDIsSet(false);
    this.locationID = 0;
    this.date = null;
    setSeatsIsSet(false);
    this.seats = 0;
  }

  public int getId() {
    return this.id;
  }

  public Concert setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getArtistID() {
    return this.artistID;
  }

  public Concert setArtistID(int artistID) {
    this.artistID = artistID;
    setArtistIDIsSet(true);
    return this;
  }

  public void unsetArtistID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ARTISTID_ISSET_ID);
  }

  /** Returns true if field artistID is set (has been assigned a value) and false otherwise */
  public boolean isSetArtistID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ARTISTID_ISSET_ID);
  }

  public void setArtistIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ARTISTID_ISSET_ID, value);
  }

  public int getLocationID() {
    return this.locationID;
  }

  public Concert setLocationID(int locationID) {
    this.locationID = locationID;
    setLocationIDIsSet(true);
    return this;
  }

  public void unsetLocationID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCATIONID_ISSET_ID);
  }

  /** Returns true if field locationID is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCATIONID_ISSET_ID);
  }

  public void setLocationIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCATIONID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getDate() {
    return this.date;
  }

  public Concert setDate(@org.apache.thrift.annotation.Nullable String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public int getSeats() {
    return this.seats;
  }

  public Concert setSeats(int seats) {
    this.seats = seats;
    setSeatsIsSet(true);
    return this;
  }

  public void unsetSeats() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEATS_ISSET_ID);
  }

  /** Returns true if field seats is set (has been assigned a value) and false otherwise */
  public boolean isSetSeats() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEATS_ISSET_ID);
  }

  public void setSeatsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEATS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ARTIST_ID:
      if (value == null) {
        unsetArtistID();
      } else {
        setArtistID((Integer)value);
      }
      break;

    case LOCATION_ID:
      if (value == null) {
        unsetLocationID();
      } else {
        setLocationID((Integer)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case SEATS:
      if (value == null) {
        unsetSeats();
      } else {
        setSeats((Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case ARTIST_ID:
      return getArtistID();

    case LOCATION_ID:
      return getLocationID();

    case DATE:
      return getDate();

    case SEATS:
      return getSeats();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ARTIST_ID:
      return isSetArtistID();
    case LOCATION_ID:
      return isSetLocationID();
    case DATE:
      return isSetDate();
    case SEATS:
      return isSetSeats();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Concert)
      return this.equals((Concert)that);
    return false;
  }

  public boolean equals(Concert that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_artistID = true;
    boolean that_present_artistID = true;
    if (this_present_artistID || that_present_artistID) {
      if (!(this_present_artistID && that_present_artistID))
        return false;
      if (this.artistID != that.artistID)
        return false;
    }

    boolean this_present_locationID = true;
    boolean that_present_locationID = true;
    if (this_present_locationID || that_present_locationID) {
      if (!(this_present_locationID && that_present_locationID))
        return false;
      if (this.locationID != that.locationID)
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_seats = true;
    boolean that_present_seats = true;
    if (this_present_seats || that_present_seats) {
      if (!(this_present_seats && that_present_seats))
        return false;
      if (this.seats != that.seats)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + artistID;

    hashCode = hashCode * 8191 + locationID;

    hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
    if (isSetDate())
      hashCode = hashCode * 8191 + date.hashCode();

    hashCode = hashCode * 8191 + seats;

    return hashCode;
  }

  @Override
  public int compareTo(Concert other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArtistID()).compareTo(other.isSetArtistID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArtistID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.artistID, other.artistID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationID()).compareTo(other.isSetLocationID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationID, other.locationID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeats()).compareTo(other.isSetSeats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seats, other.seats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Concert(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("artistID:");
    sb.append(this.artistID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationID:");
    sb.append(this.locationID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("seats:");
    sb.append(this.seats);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConcertStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConcertStandardScheme getScheme() {
      return new ConcertStandardScheme();
    }
  }

  private static class ConcertStandardScheme extends org.apache.thrift.scheme.StandardScheme<Concert> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Concert struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARTIST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.artistID = iprot.readI32();
              struct.setArtistIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.locationID = iprot.readI32();
              struct.setLocationIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEATS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seats = iprot.readI32();
              struct.setSeatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Concert struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARTIST_ID_FIELD_DESC);
      oprot.writeI32(struct.artistID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCATION_ID_FIELD_DESC);
      oprot.writeI32(struct.locationID);
      oprot.writeFieldEnd();
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEATS_FIELD_DESC);
      oprot.writeI32(struct.seats);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConcertTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConcertTupleScheme getScheme() {
      return new ConcertTupleScheme();
    }
  }

  private static class ConcertTupleScheme extends org.apache.thrift.scheme.TupleScheme<Concert> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Concert struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetArtistID()) {
        optionals.set(1);
      }
      if (struct.isSetLocationID()) {
        optionals.set(2);
      }
      if (struct.isSetDate()) {
        optionals.set(3);
      }
      if (struct.isSetSeats()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetArtistID()) {
        oprot.writeI32(struct.artistID);
      }
      if (struct.isSetLocationID()) {
        oprot.writeI32(struct.locationID);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetSeats()) {
        oprot.writeI32(struct.seats);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Concert struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.artistID = iprot.readI32();
        struct.setArtistIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.locationID = iprot.readI32();
        struct.setLocationIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.seats = iprot.readI32();
        struct.setSeatsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

