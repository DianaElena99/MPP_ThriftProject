/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.Festival.common;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-04-20")
public class ConcertDTO implements org.apache.thrift.TBase<ConcertDTO, ConcertDTO._Fields>, java.io.Serializable, Cloneable, Comparable<ConcertDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConcertDTO");

  private static final org.apache.thrift.protocol.TField CONCERT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("concertID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ARTIST_FIELD_DESC = new org.apache.thrift.protocol.TField("artist", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SEATS_SOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("seatsSold", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SEATS_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("seatsTotal", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SEATS_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("seatsFree", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConcertDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConcertDTOTupleSchemeFactory();

  public int concertID; // required
  public @org.apache.thrift.annotation.Nullable String artist; // required
  public @org.apache.thrift.annotation.Nullable String location; // required
  public @org.apache.thrift.annotation.Nullable String date; // required
  public int seatsSold; // required
  public int seatsTotal; // required
  public int seatsFree; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONCERT_ID((short)1, "concertID"),
    ARTIST((short)2, "artist"),
    LOCATION((short)3, "location"),
    DATE((short)4, "date"),
    SEATS_SOLD((short)5, "seatsSold"),
    SEATS_TOTAL((short)6, "seatsTotal"),
    SEATS_FREE((short)7, "seatsFree");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONCERT_ID
          return CONCERT_ID;
        case 2: // ARTIST
          return ARTIST;
        case 3: // LOCATION
          return LOCATION;
        case 4: // DATE
          return DATE;
        case 5: // SEATS_SOLD
          return SEATS_SOLD;
        case 6: // SEATS_TOTAL
          return SEATS_TOTAL;
        case 7: // SEATS_FREE
          return SEATS_FREE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONCERTID_ISSET_ID = 0;
  private static final int __SEATSSOLD_ISSET_ID = 1;
  private static final int __SEATSTOTAL_ISSET_ID = 2;
  private static final int __SEATSFREE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONCERT_ID, new org.apache.thrift.meta_data.FieldMetaData("concertID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARTIST, new org.apache.thrift.meta_data.FieldMetaData("artist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEATS_SOLD, new org.apache.thrift.meta_data.FieldMetaData("seatsSold", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEATS_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("seatsTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEATS_FREE, new org.apache.thrift.meta_data.FieldMetaData("seatsFree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConcertDTO.class, metaDataMap);
  }

  public ConcertDTO() {
  }

  public ConcertDTO(
    int concertID,
    String artist,
    String location,
    String date,
    int seatsSold,
    int seatsTotal,
    int seatsFree)
  {
    this();
    this.concertID = concertID;
    setConcertIDIsSet(true);
    this.artist = artist;
    this.location = location;
    this.date = date;
    this.seatsSold = seatsSold;
    setSeatsSoldIsSet(true);
    this.seatsTotal = seatsTotal;
    setSeatsTotalIsSet(true);
    this.seatsFree = seatsFree;
    setSeatsFreeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConcertDTO(ConcertDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.concertID = other.concertID;
    if (other.isSetArtist()) {
      this.artist = other.artist;
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetDate()) {
      this.date = other.date;
    }
    this.seatsSold = other.seatsSold;
    this.seatsTotal = other.seatsTotal;
    this.seatsFree = other.seatsFree;
  }

  public ConcertDTO deepCopy() {
    return new ConcertDTO(this);
  }

  @Override
  public void clear() {
    setConcertIDIsSet(false);
    this.concertID = 0;
    this.artist = null;
    this.location = null;
    this.date = null;
    setSeatsSoldIsSet(false);
    this.seatsSold = 0;
    setSeatsTotalIsSet(false);
    this.seatsTotal = 0;
    setSeatsFreeIsSet(false);
    this.seatsFree = 0;
  }

  public int getConcertID() {
    return this.concertID;
  }

  public ConcertDTO setConcertID(int concertID) {
    this.concertID = concertID;
    setConcertIDIsSet(true);
    return this;
  }

  public void unsetConcertID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONCERTID_ISSET_ID);
  }

  /** Returns true if field concertID is set (has been assigned a value) and false otherwise */
  public boolean isSetConcertID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONCERTID_ISSET_ID);
  }

  public void setConcertIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONCERTID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getArtist() {
    return this.artist;
  }

  public ConcertDTO setArtist(@org.apache.thrift.annotation.Nullable String artist) {
    this.artist = artist;
    return this;
  }

  public void unsetArtist() {
    this.artist = null;
  }

  /** Returns true if field artist is set (has been assigned a value) and false otherwise */
  public boolean isSetArtist() {
    return this.artist != null;
  }

  public void setArtistIsSet(boolean value) {
    if (!value) {
      this.artist = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getLocation() {
    return this.location;
  }

  public ConcertDTO setLocation(@org.apache.thrift.annotation.Nullable String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getDate() {
    return this.date;
  }

  public ConcertDTO setDate(@org.apache.thrift.annotation.Nullable String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public int getSeatsSold() {
    return this.seatsSold;
  }

  public ConcertDTO setSeatsSold(int seatsSold) {
    this.seatsSold = seatsSold;
    setSeatsSoldIsSet(true);
    return this;
  }

  public void unsetSeatsSold() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEATSSOLD_ISSET_ID);
  }

  /** Returns true if field seatsSold is set (has been assigned a value) and false otherwise */
  public boolean isSetSeatsSold() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEATSSOLD_ISSET_ID);
  }

  public void setSeatsSoldIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEATSSOLD_ISSET_ID, value);
  }

  public int getSeatsTotal() {
    return this.seatsTotal;
  }

  public ConcertDTO setSeatsTotal(int seatsTotal) {
    this.seatsTotal = seatsTotal;
    setSeatsTotalIsSet(true);
    return this;
  }

  public void unsetSeatsTotal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEATSTOTAL_ISSET_ID);
  }

  /** Returns true if field seatsTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetSeatsTotal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEATSTOTAL_ISSET_ID);
  }

  public void setSeatsTotalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEATSTOTAL_ISSET_ID, value);
  }

  public int getSeatsFree() {
    return this.seatsFree;
  }

  public ConcertDTO setSeatsFree(int seatsFree) {
    this.seatsFree = seatsFree;
    setSeatsFreeIsSet(true);
    return this;
  }

  public void unsetSeatsFree() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEATSFREE_ISSET_ID);
  }

  /** Returns true if field seatsFree is set (has been assigned a value) and false otherwise */
  public boolean isSetSeatsFree() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEATSFREE_ISSET_ID);
  }

  public void setSeatsFreeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEATSFREE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case CONCERT_ID:
      if (value == null) {
        unsetConcertID();
      } else {
        setConcertID((Integer)value);
      }
      break;

    case ARTIST:
      if (value == null) {
        unsetArtist();
      } else {
        setArtist((String)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case SEATS_SOLD:
      if (value == null) {
        unsetSeatsSold();
      } else {
        setSeatsSold((Integer)value);
      }
      break;

    case SEATS_TOTAL:
      if (value == null) {
        unsetSeatsTotal();
      } else {
        setSeatsTotal((Integer)value);
      }
      break;

    case SEATS_FREE:
      if (value == null) {
        unsetSeatsFree();
      } else {
        setSeatsFree((Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONCERT_ID:
      return getConcertID();

    case ARTIST:
      return getArtist();

    case LOCATION:
      return getLocation();

    case DATE:
      return getDate();

    case SEATS_SOLD:
      return getSeatsSold();

    case SEATS_TOTAL:
      return getSeatsTotal();

    case SEATS_FREE:
      return getSeatsFree();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONCERT_ID:
      return isSetConcertID();
    case ARTIST:
      return isSetArtist();
    case LOCATION:
      return isSetLocation();
    case DATE:
      return isSetDate();
    case SEATS_SOLD:
      return isSetSeatsSold();
    case SEATS_TOTAL:
      return isSetSeatsTotal();
    case SEATS_FREE:
      return isSetSeatsFree();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConcertDTO)
      return this.equals((ConcertDTO)that);
    return false;
  }

  public boolean equals(ConcertDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_concertID = true;
    boolean that_present_concertID = true;
    if (this_present_concertID || that_present_concertID) {
      if (!(this_present_concertID && that_present_concertID))
        return false;
      if (this.concertID != that.concertID)
        return false;
    }

    boolean this_present_artist = true && this.isSetArtist();
    boolean that_present_artist = true && that.isSetArtist();
    if (this_present_artist || that_present_artist) {
      if (!(this_present_artist && that_present_artist))
        return false;
      if (!this.artist.equals(that.artist))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_seatsSold = true;
    boolean that_present_seatsSold = true;
    if (this_present_seatsSold || that_present_seatsSold) {
      if (!(this_present_seatsSold && that_present_seatsSold))
        return false;
      if (this.seatsSold != that.seatsSold)
        return false;
    }

    boolean this_present_seatsTotal = true;
    boolean that_present_seatsTotal = true;
    if (this_present_seatsTotal || that_present_seatsTotal) {
      if (!(this_present_seatsTotal && that_present_seatsTotal))
        return false;
      if (this.seatsTotal != that.seatsTotal)
        return false;
    }

    boolean this_present_seatsFree = true;
    boolean that_present_seatsFree = true;
    if (this_present_seatsFree || that_present_seatsFree) {
      if (!(this_present_seatsFree && that_present_seatsFree))
        return false;
      if (this.seatsFree != that.seatsFree)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + concertID;

    hashCode = hashCode * 8191 + ((isSetArtist()) ? 131071 : 524287);
    if (isSetArtist())
      hashCode = hashCode * 8191 + artist.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
    if (isSetLocation())
      hashCode = hashCode * 8191 + location.hashCode();

    hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
    if (isSetDate())
      hashCode = hashCode * 8191 + date.hashCode();

    hashCode = hashCode * 8191 + seatsSold;

    hashCode = hashCode * 8191 + seatsTotal;

    hashCode = hashCode * 8191 + seatsFree;

    return hashCode;
  }

  @Override
  public int compareTo(ConcertDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConcertID()).compareTo(other.isSetConcertID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConcertID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.concertID, other.concertID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArtist()).compareTo(other.isSetArtist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArtist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.artist, other.artist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeatsSold()).compareTo(other.isSetSeatsSold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeatsSold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seatsSold, other.seatsSold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeatsTotal()).compareTo(other.isSetSeatsTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeatsTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seatsTotal, other.seatsTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeatsFree()).compareTo(other.isSetSeatsFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeatsFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seatsFree, other.seatsFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConcertDTO(");
    boolean first = true;

    sb.append("concertID:");
    sb.append(this.concertID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("artist:");
    if (this.artist == null) {
      sb.append("null");
    } else {
      sb.append(this.artist);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("seatsSold:");
    sb.append(this.seatsSold);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seatsTotal:");
    sb.append(this.seatsTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seatsFree:");
    sb.append(this.seatsFree);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConcertDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConcertDTOStandardScheme getScheme() {
      return new ConcertDTOStandardScheme();
    }
  }

  private static class ConcertDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConcertDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConcertDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONCERT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.concertID = iprot.readI32();
              struct.setConcertIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARTIST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.artist = iprot.readString();
              struct.setArtistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEATS_SOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seatsSold = iprot.readI32();
              struct.setSeatsSoldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEATS_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seatsTotal = iprot.readI32();
              struct.setSeatsTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SEATS_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seatsFree = iprot.readI32();
              struct.setSeatsFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConcertDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CONCERT_ID_FIELD_DESC);
      oprot.writeI32(struct.concertID);
      oprot.writeFieldEnd();
      if (struct.artist != null) {
        oprot.writeFieldBegin(ARTIST_FIELD_DESC);
        oprot.writeString(struct.artist);
        oprot.writeFieldEnd();
      }
      if (struct.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        oprot.writeString(struct.location);
        oprot.writeFieldEnd();
      }
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEATS_SOLD_FIELD_DESC);
      oprot.writeI32(struct.seatsSold);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEATS_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.seatsTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEATS_FREE_FIELD_DESC);
      oprot.writeI32(struct.seatsFree);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConcertDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConcertDTOTupleScheme getScheme() {
      return new ConcertDTOTupleScheme();
    }
  }

  private static class ConcertDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConcertDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConcertDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetConcertID()) {
        optionals.set(0);
      }
      if (struct.isSetArtist()) {
        optionals.set(1);
      }
      if (struct.isSetLocation()) {
        optionals.set(2);
      }
      if (struct.isSetDate()) {
        optionals.set(3);
      }
      if (struct.isSetSeatsSold()) {
        optionals.set(4);
      }
      if (struct.isSetSeatsTotal()) {
        optionals.set(5);
      }
      if (struct.isSetSeatsFree()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetConcertID()) {
        oprot.writeI32(struct.concertID);
      }
      if (struct.isSetArtist()) {
        oprot.writeString(struct.artist);
      }
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetSeatsSold()) {
        oprot.writeI32(struct.seatsSold);
      }
      if (struct.isSetSeatsTotal()) {
        oprot.writeI32(struct.seatsTotal);
      }
      if (struct.isSetSeatsFree()) {
        oprot.writeI32(struct.seatsFree);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConcertDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.concertID = iprot.readI32();
        struct.setConcertIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.artist = iprot.readString();
        struct.setArtistIsSet(true);
      }
      if (incoming.get(2)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.seatsSold = iprot.readI32();
        struct.setSeatsSoldIsSet(true);
      }
      if (incoming.get(5)) {
        struct.seatsTotal = iprot.readI32();
        struct.setSeatsTotalIsSet(true);
      }
      if (incoming.get(6)) {
        struct.seatsFree = iprot.readI32();
        struct.setSeatsFreeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

